// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator block runs every time you run `prisma generate`.
// The prisma-client-js is the default generator that builds ts types based on the db models.
// You can find more about generators here: https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

// The datasource block specifies the url to your DBMS.
// You only need to set the DATABASE_URL in your environment file.
// You can find more about datasources here: https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  username       String      @unique // Unique constraint
  name           String?     @db.VarChar(35) // Limit display name to 35 characters
  email          String      @unique // Unique constraint
  description    String?
  password       String
  privacy        UserPrivacy @default(PUBLIC)
  profilePicture String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  posts     Post[]
  reactions Reaction[]
  messages  Message[]
  Rooms     Room[]
  follows   Follow[]   @relation(name: "followed")
  followers Follow[]   @relation(name: "followers")
}

model Follow {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  followerId String @db.Uuid()
  followedId String @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  follower User @relation(name: "followed", fields: [followerId], references: [id], onDelete: Cascade) // One to many
  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade) // One to many
}

model Post {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  authorId   String   @db.Uuid // Foreign Key
  mainPostId String?  @db.Uuid // Foreign Key
  content    String   @db.VarChar(240) // Limit the content to 240 characters
  images     String[] @default([])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  mainPost  Post?      @relation("mainPost", fields: [mainPostId], references: [id], onDelete: Cascade)
  comments  Post[]     @relation("mainPost") // One to many
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade) // One to many
  reactions Reaction[]
}

model Reaction {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  userId    String       @db.Uuid // Foreign Key
  postId    String       @db.Uuid // Foreign Key
  createdAt DateTime     @default(now())
  type      ReactionType

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // One to many
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade) // One to many
}

model Room {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  users    User[]
  messages Message[]
  type     RoomType

  createdAt DateTime @default(now())

  groupRoom GroupRoom?
}

model GroupRoom {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  name        String
  description String?
  roomId      String  @unique @db.Uuid // Foreign Key
  groupPic  String?

  createdAt DateTime @default(now())

  room Room @relation(onDelete: Cascade, fields: [roomId], references: [id]) // One to one
}

model Message {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  roomId   String @db.Uuid // Foreign Key
  senderId String @db.Uuid // Foreign Key
  content  String

  createdAt DateTime @default(now())

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade) // One to many
  user User @relation(fields: [senderId], references: [id], onDelete: Cascade) // One to many
}

enum ReactionType {
  LIKE
  RETWEET
}

enum RoomType {
  GROUP
  DIRECT
}

enum UserPrivacy {
  PUBLIC
  PRIVATE
}
